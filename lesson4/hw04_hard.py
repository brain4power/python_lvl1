# Задание-1:
# Матрицы в питоне реализуются в виде вложенных списков:
# Пример. Дано:
matrix = [[1, 0, 8],
          [3, 4, 1],
          [0, 4, 2]]
          
# Выполнить поворот (транспонирование) матрицы
# Пример. Результат:
# matrix_rotate = [[1, 3, 0],
#                  [0, 4, 4],
#                  [8, 1, 2]]

# Суть сложности hard: Решите задачу в одну строку

print("rotate_matrix = ", list(map(list, zip(*matrix))))

# Задание-2:
# Найдите наибольшее произведение пяти последовательных цифр в 1000-значном числе.
# Выведите произведение и индекс смещения первого числа последовательных 5-ти цифр.
# Пример 1000-значного числа:
number = """
73167176531330624919225119674426574742355349194934
96983520312774506326239578318016984801869478851843
85861560789112949495459501737958331952853208805511
12540698747158523863050715693290963295227443043557
66896648950445244523161731856403098711121722383113
62229893423380308135336276614282806444486645238749
30358907296290491560440772390713810515859307960866
70172427121883998797908792274921901699720888093776
65727333001053367881220235421809751254540594752243
52584907711670556013604839586446706324415722155397
53697817977846174064955149290862569321978468622482
83972241375657056057490261407972968652414535100474
82166370484403199890008895243450658541227588666881
16427171479924442928230863465674813919123162824586
17866458359124566529476545682848912883142607690042
24219022671055626321111109370544217506941658960408
07198403850962455444362981230987879927244284909188
84580156166097919133875499200524063689912560717606
05886116467109405077541002256983155200055935729725
71636269561882670428252483600823257530420752963450"""

import random


number = ""
for _ in range(1000):
    number += str(random.randint(0, 9))


def multiply(*args):
    result = 1
    for arg in args:
        result *= int(arg)
    return result


max_multiply = 0
offset = 0
for index, element in enumerate(number):
    if len(number[index:index + 5]) == 5:
        if multiply(*number[index:index + 5]) > max_multiply:
            max_multiply = multiply(*number[index:index + 5])
            offset = index

print("max_multiply = {}, offset = {}".format(max_multiply, offset))


# Задание-3 (Ферзи):
# Известно, что на доске 8×8 можно расставить 8 ферзей так, чтобы они не били
# друг друга. Вам дана расстановка 8 ферзей на доске.
# Определите, есть ли среди них пара бьющих друг друга.
# Программа получает на вход восемь пар чисел,
# каждое число от 1 до 8 — координаты 8 ферзей.
# Если ферзи не бьют друг друга, выведите слово NO, иначе выведите YES.

def queen(x1, y1, x2, y2, x3, y3, x4, y4, x5, y5, x6, y6, x7, y7, x8, y8):
    x_array = [x1, x2, x3, x4, x5, x6, x7, x8]
    y_array = [y1, y2, y3, y4, y5, y6, y7, y8]
    data = [[x1, y1], [x2, y2], [x3, y3], [x4, y4], [x5, y5], [x6, y6], [x7, y7], [x8, y8]]
    # проверяем диагонали
    for x in data:
        # проверяем влево вверх:
        check_box = x
        while not check_box[0] or check_box[1] != 9:
            if [check_box[0] - 1, check_box[1] + 1] in data:
                return "NO"
            check_box = [check_box[0] - 1, check_box[1] + 1]
        # проверяем право верх:
        check_box = x
        while check_box[0] != 9 or check_box[1] != 9:
            if [check_box[0] + 1, check_box[1] + 1] in data:
                return "NO"
            check_box = [check_box[0] + 1, check_box[1] + 1]
        # проверяем право низ:
        while check_box[0] != 9 or not check_box[1]:
            if [check_box[0] + 1, check_box[1] - 1] in data:
                return "NO"
            check_box = [check_box[0] + 1, check_box[1] - 1]
        # проверяем лево низ:
        while not check_box[0] or not check_box[1]:
            if [check_box[0] - 1, check_box[1] - 1] in data:
                return "NO"
            check_box = [check_box[0] - 1, check_box[1] - 1]
    # проверяем вертикали:
    for _ in range(len(x_array)):
        check_number = x_array.pop()
        if check_number in x_array:
            return "NO"
    # проверяем горизонатали
    for _ in range(len(y_array)):
        check_number = y_array.pop()
        if check_number in y_array:
            return "NO"
    return "YES"


print(queen(1, 2, 2, 3, 3, 4, 4, 5, 5, 6, 6, 7, 7, 8, 8, 1))
